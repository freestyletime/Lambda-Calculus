Q1. # # # # # #

(define maj3-filter
(lambda (f1 f2 f3 e)
  (if (null? e)
        '()
        (let  ([x (car e)]
               [y (maj3-filter f1 f2 f3 (cdr e))])
        (cond 
            ((and (f1 x) (f2 x)) (cons x y))
            ((and (f1 x) (f3 x)) (cons x y))
            ((and (f2 x) (f3 x)) (cons x y))
            (else y)
    )))))

Q2. # # # # # #
    (λ a . (λ b . b)) ((λ x . x x) (λ y . y y)) (λ z . d)

(a). 
    As we know that the form of Y Combinator is 
        Y = λ h . (λ x . h (x x))  (λ x . h (x x))

    The term E has the similar form => ((λ x . x x) (λ y . y y))
    ((λ x . x x) (λ y . y y)) => ((λ y . y y)(λ y . y y)) an infinite chain
(b).
    (λ a . (λ b . b)) ((λ x . x x) (λ y . y y)) (λ z . d)
    = (λ b . b)(λ z . d)
    = (λ z . d)

(c).
    Like Y Combinator, in Haskell it canot be used because 
    1. it contains an infinite recursive type (a = a -> b)
    2. simply typed lambda calculus disallow non-termination,
    hence it often cannot be assigned a type

(d).
    When E is reduced to a normal form : (λ z . d)
    it can be well typed in the simply typed lambda calculus
        eg. (λ z:Int . d) -> String
    

Q3. # # # # # #
maj3filter f1 f2 f3 [] = []
maj3filter f1 f2 f3 (x:xs)
    | p1 && p2  =  x:fun
    | p1 && p3  =  x:fun
    | p2 && p3  =  x:fun
    | otherwise = fun
    where 
      p1  = f1 x
      p2  = f2 x
      p3  = f3 x
      fun = maj3filter f1 f2 f3 xs

Q4. # # # # # #
mushed([],[],[]).
mushed([M1|L1],Y,[M1|Z]) :- mushed(L1,Y,Z).
mushed(X,[M2|L2],[M2|Z]) :- mushed(X,L2,Z).
